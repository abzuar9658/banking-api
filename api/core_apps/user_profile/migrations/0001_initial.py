# Generated by Django 4.2.15 on 2025-05-14 11:03

import cloudinary.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("mr", "Mr"),
                            ("mrs", "Mrs"),
                            ("ms", "Ms"),
                            ("dr", "Dr"),
                        ],
                        default="mr",
                        help_text="The title of the user",
                        max_length=3,
                        verbose_name="Title",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        default="male",
                        help_text="The gender of the user",
                        max_length=6,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        help_text="The date of birth of the user",
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(1900, 1, 1)
                            )
                        ],
                        verbose_name="Date of Birth",
                    ),
                ),
                (
                    "martial_status",
                    models.CharField(
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("divorced", "Divorced"),
                            ("widowed", "Widowed"),
                            ("separated", "Separated"),
                            ("unknown", "Unknown"),
                        ],
                        default="single",
                        help_text="The martial status of the user",
                        max_length=10,
                        verbose_name="Martial Status",
                    ),
                ),
                (
                    "country_of_birth",
                    django_countries.fields.CountryField(
                        blank=True,
                        default="PAK",
                        help_text="The country of birth of the user",
                        max_length=2,
                        null=True,
                        verbose_name="Country of Birth",
                    ),
                ),
                (
                    "country_of_residence",
                    django_countries.fields.CountryField(
                        blank=True,
                        default="PAK",
                        help_text="The country of residence of the user",
                        max_length=2,
                        null=True,
                        verbose_name="Country of Residence",
                    ),
                ),
                (
                    "identification_means",
                    models.CharField(
                        choices=[
                            ("passport", "Passport"),
                            ("national_id", "National ID"),
                            ("drivers_license", "Drivers License"),
                            ("voters_id", "Voters ID"),
                            ("other", "Other"),
                        ],
                        default="national_id",
                        help_text="The means of identification of the user",
                        max_length=16,
                        verbose_name="Identification Means",
                    ),
                ),
                (
                    "identification_number",
                    models.CharField(
                        help_text="The identification number of the user",
                        max_length=12,
                        verbose_name="Identification Number",
                    ),
                ),
                (
                    "identification_issue_date",
                    models.DateField(
                        help_text="The issue date of the identification of the user",
                        verbose_name="Identification Issue Date",
                    ),
                ),
                (
                    "identification_expiry_date",
                    models.DateField(
                        help_text="The expiry date of the identification of the user",
                        verbose_name="Identification Expiry Date",
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        choices=[
                            ("employed", "Employed"),
                            ("self_employed", "Self Employed"),
                            ("unemployed", "Unemployed"),
                            ("retired", "Retired"),
                            ("student", "Student"),
                            ("other", "Other"),
                        ],
                        default="employed",
                        help_text="The employment status of the user",
                        max_length=15,
                        verbose_name="Employment Status",
                    ),
                ),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("full_time", "Full Time"),
                            ("part_time", "Part Time"),
                            ("contract", "Contract"),
                            ("volunteer", "Volunteer"),
                            ("other", "Other"),
                        ],
                        default="full_time",
                        help_text="The type of employment of the user",
                        max_length=12,
                        verbose_name="Employment Type",
                    ),
                ),
                (
                    "passport_number",
                    models.CharField(
                        blank=True,
                        help_text="The passport number of the user",
                        max_length=12,
                        null=True,
                        verbose_name="Passport Number",
                    ),
                ),
                (
                    "nationality",
                    django_countries.fields.CountryField(
                        blank=True,
                        default="Unknown",
                        help_text="The nationality of the user",
                        max_length=2,
                        null=True,
                        verbose_name="Nationality",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="The address of the user",
                        max_length=12,
                        verbose_name="Address",
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        choices=[
                            ("employed", "Employed"),
                            ("self_employed", "Self Employed"),
                            ("unemployed", "Unemployed"),
                            ("retired", "Retired"),
                            ("student", "Student"),
                            ("other", "Other"),
                        ],
                        default="employed",
                        help_text="The occupation of the user",
                        max_length=15,
                        verbose_name="Occupation",
                    ),
                ),
                (
                    "employer_name",
                    models.CharField(
                        help_text="The name of the employer of the user",
                        max_length=12,
                        verbose_name="Employer Name",
                    ),
                ),
                (
                    "annual_income",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The annual income of the user",
                        max_digits=10,
                        verbose_name="Annual Income",
                    ),
                ),
                (
                    "date_of_employment",
                    models.DateField(
                        help_text="The date of employment of the user",
                        verbose_name="Date of Employment",
                    ),
                ),
                (
                    "employer_address",
                    models.CharField(
                        blank=True,
                        help_text="The address of the employer of the user",
                        max_length=12,
                        null=True,
                        verbose_name="Employer Address",
                    ),
                ),
                (
                    "employer_city",
                    models.CharField(
                        blank=True,
                        help_text="The city of the employer of the user",
                        max_length=12,
                        null=True,
                        verbose_name="Employer City",
                    ),
                ),
                (
                    "photo",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="The photo of the user",
                        max_length=255,
                        null=True,
                        verbose_name="Photo",
                    ),
                ),
                (
                    "photo_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL of the photo of the user",
                        null=True,
                        verbose_name="Photo URL",
                    ),
                ),
                (
                    "id_photo",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="The ID photo of the user",
                        max_length=255,
                        null=True,
                        verbose_name="ID Photo",
                    ),
                ),
                (
                    "id_photo_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL of the ID photo of the user",
                        null=True,
                        verbose_name="ID Photo URL",
                    ),
                ),
                (
                    "signature_photo",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="The signature photo of the user",
                        max_length=255,
                        null=True,
                        verbose_name="Signature Photo",
                    ),
                ),
                (
                    "signature_photo_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL of the signature photo of the user",
                        null=True,
                        verbose_name="Signature Photo URL",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NextOfKin",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("mr", "Mr"),
                            ("mrs", "Mrs"),
                            ("ms", "Ms"),
                            ("dr", "Dr"),
                        ],
                        default="mr",
                        help_text="The title of the next of kin",
                        max_length=3,
                        verbose_name="Title",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="The first name of the next of kin",
                        max_length=12,
                        verbose_name="First Name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="The last name of the next of kin",
                        max_length=12,
                        verbose_name="Last Name",
                    ),
                ),
                (
                    "other_names",
                    models.CharField(
                        help_text="The other names of the next of kin",
                        max_length=12,
                        verbose_name="Other Names",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        default="male",
                        help_text="The gender of the next of kin",
                        max_length=6,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        help_text="The date of birth of the next of kin",
                        verbose_name="Date of Birth",
                    ),
                ),
                (
                    "relationship",
                    models.CharField(
                        help_text="The relationship of the next of kin",
                        max_length=12,
                        verbose_name="Relationship",
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        help_text="The email address of the next of kin",
                        max_length=254,
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="The phone number of the next of kin",
                        max_length=128,
                        region=None,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="The address of the next of kin",
                        max_length=12,
                        verbose_name="Address",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        help_text="The city of the next of kin",
                        max_length=12,
                        verbose_name="City",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="The country of the next of kin",
                        max_length=2,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the next of kin is the primary next of kin",
                        verbose_name="Is Primary",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="next_of_kin",
                        to="user_profile.profile",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="nextofkin",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_primary", True)),
                fields=("profile", "is_primary"),
                name="unique_primary_next_of_kin",
            ),
        ),
    ]
